{
	"info": {
		"_postman_id": "0e59de69-c7cf-4738-b96a-6108ff04802c",
		"name": "Send-request.me",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26438672"
	},
	"item": [
		{
			"name": "Set Schemas",
			"item": [
				{
					"name": "Error jsonSchemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let HTTPValidationError = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"loc\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": [\r",
									"                                \"string\",\r",
									"                                \"integer\"\r",
									"                            ]\r",
									"                        }\r",
									"                    },\r",
									"                    \"msg\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"loc\",\r",
									"                    \"msg\",\r",
									"                    \"type\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"HTTPValidationError\", JSON.stringify(HTTPValidationError));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Companies jsonSchemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let CompanyList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"company_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_address\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_status\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\"ACTIVE\", \"CLOSED\", \"BANKRUPT\"]\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description_lang\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\":\r",
									"                        {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"translation_lang\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                \"translation\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"translation_lang\",\r",
									"                                \"translation\"\r",
									"                            ]\r",
									"                        }\r",
									"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"company_id\",\r",
									"                    \"company_name\",\r",
									"                    \"company_address\",\r",
									"                    \"company_status\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        },\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"meta\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let Company = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"company_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_address\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"company_status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [ \"ACTIVE\", \"BANKRUPT\", \"CLOSED\" ]\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description_lang\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [ \"EN\", \"RU\", \"PL\", \"UA\" ]\r",
									"                    },\r",
									"                    \"translation\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\",\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"CompanyList\", JSON.stringify(CompanyList));\r",
									"pm.environment.set(\"Company\", JSON.stringify(Company));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users jsonSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let UsersList = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"total\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"total\"\r",
									"            ]\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\":\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": [\"string\", \"null\"]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": [\"integer\", \"null\"]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let BaseUser = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"last_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"last_name\",\r",
									"        \"user_id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"let ResponseUser = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"first_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"last_name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"company_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"last_name\",\r",
									"        \"user_id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"UsersList\", JSON.stringify(UsersList));\r",
									"pm.environment.set(\"BaseUser\", JSON.stringify(BaseUser));\r",
									"pm.environment.set(\"ResponseUser\", JSON.stringify(ResponseUser));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth jsonSchemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let MeResponse = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email_address\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"email\"\r",
									"        },\r",
									"        \"valid_till\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\",\r",
									"        \"user_name\",\r",
									"        \"email_address\",\r",
									"        \"valid_till\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"MeResponse\", JSON.stringify(MeResponse));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "companies",
			"item": [
				{
					"name": "1CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"pm.test(\"Len of JSON with default limit\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length\r",
									"    pm.expect(countLenData).to.eql(3)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2CompaniesEnableSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.eql('https://send-request.me/api/companies');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": true,
						"disableUrlEncoding": true,
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://send-request.me/api/companies",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "3CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"\r",
									"pm.test(\"Len of JSON with limit=5\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length\r",
									"    pm.expect(countLenData).to.eql(5)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset=2\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4CompaniesWithStatusActive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"//let DataJson = pm.response.json().data\r",
									"//pm.test(\"Verify company_status=ACTIVE\", function () {\r",
									"//    pm.expect(DataJson[0].company_status).to.eql('ACTIVE')\r",
									"//});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    // объявляем переменную company, которая \"пробежится\" по ключу data\r",
									"    for(let company of pm.response.json().data){\r",
									"        // в каждой итерации, мы обращаемся к ключу company_status и проверяем, что значение равно \"ACTIVE\"\r",
									"        pm.expect(company.company_status).to.be.eql(\"ACTIVE\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5CompaniesWithStatusClosed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    // объявляем переменную company, которая \"пробежится\" по ключу data\r",
									"    for(let company of pm.response.json().data){\r",
									"        // в каждой итерации, мы обращаемся к ключу company_status и проверяем, что значение равно \"CLOSED\"\r",
									"        pm.expect(company.company_status).to.be.eql(\"CLOSED\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=CLOSED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6CompaniesWithStatusBankrupt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comp status\", function(){\r",
									"    for(let company of pm.response.json().data){\r",
									"        pm.expect(company.company_status).to.be.eql(\"BANKRUPT\");\r",
									"    }\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=BANKRUPT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9CompaniesWithStrQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"\r",
									"pm.test(\"Len of JSON with default limit\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length\r",
									"    pm.expect(countLenData).to.eql(3)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(1)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"CompanyList\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11CompaniesWithInvQueryOffsetString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?offset=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "offset",
									"value": "ABC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"// to.have.any.keys - эта конструкция служит, для выявления одного из ключей. Если и первый, и второй ключ будут отсутствовать, тест покажет ошибку. В аргументах соответственно передаем проверяемые ключи.\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"//условный оператор if, условием которого - является наличие ключа description_lang. В случае, если ключ отсутствует, блок с кодом не выполняется. \r",
									"//В блоке с кодом, мы объявляем тест - \"description_lang === EN\". В тесте, мы указываем путь, до нужного(первого) ключа \"translation_lang\" и проверяем, что значение данного ключа \"EN\". \r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "13CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "14CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\")\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "15CompanyByIdInvLang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"// to.have.any.keys - эта конструкция служит, для выявления одного из ключей. Если и первый, и второй ключ будут отсутствовать, тест покажет ошибку. В аргументах соответственно передаем проверяемые ключи.\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"Company\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "16UsersWithLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"let offset = pm.variables.get(\"offset\");\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].user_id).to.eql(offset);\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with limit=10\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length\r",
									"    pm.expect(countLenData).to.eql(10)\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"UsersList\"));\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://send-request.me/api/users?limit=10\", function (err, response) {\r",
									"    pm.variables.set(\"offset\", response.json().data[5].user_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=10&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "17UsersWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "18UsersWithStrLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=abc&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "abc"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "19UsersEnableSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.eql('https://send-request.me/api/users');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": true,
						"followRedirects": false,
						"disableUrlEncoding": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://send-request.me/api/users",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "20UserCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id);\r",
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name);\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name);\r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [\"Pifagor\"]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [\"Samosskiy\"]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ 3 ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"34IssuesGetUserById\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "21UserInvCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "22UserCreatedFieldNull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"detail\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": [\r",
									"                                    \"string\",\r",
									"                                    \"integer\"\r",
									"                                ]\r",
									"                            }\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": null,\r\n  \"company_id\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "23UserCreatedCompanyIdClosed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\":  \"Samosskiy\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "24UserCreatedWithoutRequiredKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"detail\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": [\r",
									"                                    \"string\",\r",
									"                                    \"integer\"\r",
									"                                ]\r",
									"                            }\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "25GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\")\r",
									"let last_name = pm.collectionVariables.get(\"last_name\")\r",
									"let company_id = pm.collectionVariables.get(\"company_id\")\r",
									"let user_id = pm.collectionVariables.get(\"user_id\")\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  first_name ]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  last_name ]\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  company_id ]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  user_id ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "26UserInvId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "27UserUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Paskal\");\r",
									"pm.collectionVariables.set(\"company_id\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();  // создаем переменную которая ссылается на response body\r",
									"//создаем тест где проверяем каждый ключ\r",
									"pm.test(\"Verify enums\", function(){\r",
									"    pm.expect(jsonData.first_name).to.be.eql(first_name);\r",
									"    pm.expect(jsonData.last_name).to.be.eql(last_name);\r",
									"    pm.expect(jsonData.company_id).to.be.eql(company_id);\r",
									"    pm.expect(jsonData.user_id).to.be.eql(user_id);\r",
									"    \r",
									"})\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  first_name ]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  last_name ]\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  company_id ]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  user_id ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28UserUpdateInvCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Blez\",\r\n    \"last_name\": \"Paskal\",\r\n    \"company_id\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "29UserUpdateInvUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Blez\",\r\n    \"last_name\": \"Paskal\",\r\n    \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "30DeleteCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"//to.not.include - означает, \"не должен содержать\". То, есть null не должен содержаться в ответе.\r",
									"pm.test(\"Response body !== null\", function(){\r",
									"    pm.expect(pm.response.json()).to.not.include([null]);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();   //Что-бы очистить наши переменные коллекций"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "31UserDeleteInvUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "issues",
			"item": [
				{
					"name": "32IssuesCompanyesWithQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data\r",
									"\r",
									"pm.test(\"Verify company_status=ACTIVE\", function () {\r",
									"    pm.expect(DataJson[0].company_status).to.eql('ACTIVE');\r",
									"});\r",
									"\r",
									"pm.test(\"Len of JSON with limit=1\", function () {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset=1\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(2);\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"data\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": [\r",
									"                        {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"company_id\": {\r",
									"                                    \"type\": \"integer\"\r",
									"                                },\r",
									"                                \"company_name\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                \"company_address\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                \"company_status\": {\r",
									"                                    \"type\": \"string\",\r",
									"                                    \"enum\": [ \"ACTIVE\" ]\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"company_id\",\r",
									"                                \"company_name\",\r",
									"                                \"company_address\",\r",
									"                                \"company_status\"\r",
									"                            ]\r",
									"                        }\r",
									"                        ]\r",
									"                    },\r",
									"                    \"meta\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"limit\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"offset\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"total\": {\r",
									"                                \"type\": \"integer\"\r",
									"                            }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"total\"\r",
									"                    ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"data\",\r",
									"                    \"meta\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?limit=1&offset=1&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "33IssuesCompanyByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"// to.have.any.keys - эта конструкция служит, для выявления одного из ключей. Если и первый, и второй ключ будут отсутствовать, тест покажет ошибку. В аргументах соответственно передаем проверяемые ключи.\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"//условный оператор if, условием которого - является наличие ключа description_lang. В случае, если ключ отсутствует, блок с кодом не выполняется. \r",
									"//В блоке с кодом, мы объявляем тест - \"description_lang === EN\". В тесте, мы указываем путь, до нужного(первого) ключа \"translation_lang\" и проверяем, что значение данного ключа \"EN\". \r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"company_name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_address\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"company_status\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [\r",
									"                            \"ACTIVE\",\r",
									"                            \"CLOSED\",\r",
									"                            \"BANKRUPT\"\r",
									"                        ]\r",
									"                    },\r",
									"                    \"description\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"description_lang\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"translation_lang\": {\r",
									"                                    \"type\": \"string\",\r",
									"                                    \"enum\": [\r",
									"                                        \"EN\",\r",
									"                                        \"RU\",\r",
									"                                        \"PL\",\r",
									"                                        \"UA\"\r",
									"                                    ]\r",
									"                                },\r",
									"                                \"translation\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"translation\"\r",
									"                            ]\r",
									"                        },\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"company_id\",\r",
									"                    \"company_name\",\r",
									"                    \"company_address\",\r",
									"                    \"company_status\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"IssuesUserCreated\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "34IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ user_id ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() { \r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UserInvCreated\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "35IssuesUserCreated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Pifagor\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Samosskiy\");\r",
									"pm.collectionVariables.set(\"company_id\", \"3\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [  first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [  last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [  company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "36IssuesUserCreatedInvCompany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"detail\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"properties\": {\r",
									"                            \"reason\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        },\r",
									"                        \"required\": [\r",
									"                            \"reason\"\r",
									"                        ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"detail\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "37UserUpdateWithoutField",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"last_name\", \"Paskal\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"null\",\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  last_name ]\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"null\",\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [ 24 ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"last_name\": \"{{last_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "38UserUpdateAllField",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Paskal\");\r",
									"pm.collectionVariables.set(\"company_id\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = parseInt(pm.collectionVariables.get(\"company_id\"));\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"\r",
									"let schema = {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  first_name ]\r",
									"                    },\r",
									"                    \"last_name\": {\r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [  last_name ]\r",
									"                    },\r",
									"                    \"company_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  company_id ]\r",
									"                    },\r",
									"                    \"user_id\": {\r",
									"                        \"type\": \"integer\",\r",
									"                        \"enum\": [  24 ]\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{first_name}}\",\r\n    \"last_name\": \"{{last_name}}\",\r\n    \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "39UserUpdateWithoutRequiredKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"detail\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": [\r",
									"                                    \"string\",\r",
									"                                    \"integer\"\r",
									"                                ]\r",
									"                            }\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "40IssuesUserCreatedWithoutRequiredKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"detail\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": {\r",
									"                                \"type\": [\r",
									"                                    \"string\",\r",
									"                                    \"integer\"\r",
									"                                ]\r",
									"                            }\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Franz\",\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "Create token (authintification)",
					"item": [
						{
							"name": "41AuthValFields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", pm.response.json().token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"pm.test(\"Token received\", function(){\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"abc\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "42AuthValNumLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"pm.test(\"Token received\", function(){\r",
											"    pm.expect(pm.response.json().token).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": 123,\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "43AuthLoginTwoSymb",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"ab\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "44AuthEmptyLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "45AuthWithoutLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"qwerty12345\",\r\n    \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "46AuthWithWrongPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"abcd\",\r\n  \"password\": \"abc\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "47AuthEmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"abcd\",\r\n  \"password\": \"\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "48AuthWithoutPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"HTTPValidationError\"));\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"abcd\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get info about user",
					"item": [
						{
							"name": "49AuthInfUsersValToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"\r",
											"let schema = JSON.parse(pm.environment.get(\"MeResponse\"));\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "50AuthIncorrectToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let token = pm.environment.get(\"token\");                // берем наш токен\r",
											"let tokenNew = token.slice(0, -10) + \"qwe1rty3BB\";      // срезаем 10 последних символов и добавляем новые символы\r",
											"\r",
											"pm.variables.set(\"token\", tokenNew);                    // сохраняем в локальную переменную \"token\""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"let DataJson = pm.response.json().detail\r",
											"\r",
											"pm.test(\"Verify reason\", function () {\r",
											"    pm.expect(DataJson.reason).to.eql('Token is incorrect. Please login and try again')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "51AuthExpiredToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const req = {                                           // объявили переменную req\r",
											"    url: \"https://send-request.me/api/auth/authorize\",  // на этот URL отправляем запрос\r",
											"    method: \"POST\",                                     // Определяем метод\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",             // Определяем \"Content-Type\" нашего request body\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",                                    // определяем формат request body\r",
											"        raw: {                                          // в ключ raw передаем JSON, который мы отправляли в С-01\r",
											"            \"login\": \"Abc\",\r",
											"            \"password\": \"qwerty12345\",\r",
											"            \"timeout\": 3,                               // время жизни токена\r",
											"        },\r",
											"    },\r",
											"};\r",
											"\r",
											"pm.sendRequest(req, function (err, response) {          // передать переменную req первым аргументом\r",
											"    pm.variables.set(\"token\", response.json().token)    // сохранить в лок. переменную актуальный токен\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, 5000);                         // ставим ожидание в 5 секунд, что-бы токен успел истечь"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"\r",
											"let DataJson = pm.response.json().detail\r",
											"\r",
											"pm.test(\"Verify reason\", function () {\r",
											"    pm.expect(DataJson.reason).to.eql('Token is expired. Please login and try again')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "52AuthWithoutToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Headers is valid\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
											"});\r",
											"\r",
											"\r",
											"let DataJson = pm.response.json().detail\r",
											"\r",
											"pm.test(\"Verify reason\", function () {\r",
											"    pm.expect(DataJson.reason).to.eql('Please use auth method for getting data for private method')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}